import React from 'react';
import {
    Box,
    Typography,
    Paper,
    Button,
    CircularProgress,
    Alert,
    Chip,
    List,
    ListItem,
    ListItemText,
    ListItemSecondaryAction,
    IconButton,
    Divider
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';

const ReviewAndSend = ({
    emailData,
    loading,
    onSend,
    isAIMode = false,
    onRemoveAttachment
}) => {
    const { recipients, emailTemplate, subject, signature, emailConfig, attachments } = emailData;

    // Function to handle attachment removal
    const handleRemoveAttachment = (index) => {
        if (onRemoveAttachment) {
            onRemoveAttachment(index);
        }
    };

    return (
        <Box sx={{ mt: 2 }}>
            <Typography variant="h6" gutterBottom>
                Review & Send {isAIMode && "AI-Generated"} Emails
            </Typography>

            <Paper sx={{ p: 3, mb: 3 }}>
                <Typography variant="subtitle1" gutterBottom>
                    Email Account
                </Typography>
                <Box sx={{ ml: 2, mb: 3 }}>
                    <Typography variant="body2">
                        <strong>Email:</strong> {emailConfig?.email}
                    </Typography>
                    <Typography variant="body2">
                        <strong>Service:</strong> {emailConfig?.service}
                    </Typography>
                </Box>

                <Typography variant="subtitle1" gutterBottom>
                    Recipients ({recipients.length})
                </Typography>
                <Box sx={{ ml: 2, mb: 3, maxHeight: '200px', overflowY: 'auto' }}>
                    {recipients.map((recipient, index) => (
                        <Box key={index} sx={{ mb: 1 }}>
                            <Typography variant="body2">
                                <strong>{recipient.name}</strong> - {recipient.email}
                                {recipient.personalizedEmail && (
                                    <Chip
                                        size="small"
                                        label="Personalized"
                                        color="success"
                                        variant="outlined"
                                        sx={{ ml: 1, height: 20, fontSize: '0.6rem' }}
                                    />
                                )}
                                {recipient.edited && (
                                    <Chip
                                        size="small"
                                        label="Edited"
                                        color="primary"
                                        variant="outlined"
                                        sx={{ ml: 1, height: 20, fontSize: '0.6rem' }}
                                    />
                                )}
                                {recipient.emails && recipient.emails.length > 1 && (
                                    <Typography variant="body2" color="text.secondary" component="span">
                                        {' '}(+{recipient.emails.length - 1} BCC)
                                    </Typography>
                                )}
                                {isAIMode && recipient.companyProfile && (
                                    <Typography variant="body2" color="text.secondary" sx={{ ml: 2 }}>
                                        Company: {recipient.companyProfile.substring(0, 30)}...
                                    </Typography>
                                )}
                            </Typography>
                        </Box>
                    ))}
                </Box>

                <Typography variant="subtitle1" gutterBottom>
                    {isAIMode ? "AI-Generated Email" : "Email Template"}
                </Typography>
                <Box sx={{ ml: 2, mb: 3 }}>
                    <Typography variant="body2">
                        <strong>Subject:</strong> {subject}
                    </Typography>

                    {recipients.some(r => r.personalizedEmail) && (
                        <Alert severity="info" sx={{ mt: 1, mb: 1 }}>
                            Some recipients will receive personalized emails generated by AI
                            {recipients.some(r => r.edited) && ' (with manual edits)'}
                            based on their job description and company profile.
                        </Alert>
                    )}

                    <Typography variant="body2" component="div" sx={{ mt: 2, whiteSpace: 'pre-line' }}>
                        <strong>Template:</strong><br />
                        <Box sx={{
                            maxHeight: '300px',
                            overflowY: 'auto',
                            border: '1px solid rgba(0, 0, 0, 0.2)',
                            borderRadius: '4px',
                            p: 2,
                            backgroundColor: '#FFFFFF',
                            '&::-webkit-scrollbar': {
                                width: '12px',
                                backgroundColor: 'rgba(0, 0, 0, 0.1)',
                            },
                            '&::-webkit-scrollbar-thumb': {
                                backgroundColor: 'rgba(0, 0, 150, 0.5)',
                                borderRadius: '6px',
                                border: '2px solid rgba(255, 255, 255, 0.5)',
                            },
                            '&::-webkit-scrollbar-thumb:hover': {
                                backgroundColor: 'rgba(0, 0, 200, 0.7)',
                            }
                        }}>
                            <Typography
                                variant="body1"
                                component="div"
                                sx={{
                                    whiteSpace: 'pre-line',
                                    lineHeight: 1.7,
                                    fontSize: '1rem',
                                    fontFamily: '"Inter", "Roboto", sans-serif',
                                    letterSpacing: '0.01em',
                                    color: '#000000',
                                    '& p': {
                                        marginBottom: '1em'
                                    }
                                }}
                            >
                                <div dangerouslySetInnerHTML={{ __html: emailTemplate }} />
                            </Typography>
                        </Box>
                    </Typography>
                </Box>

                {signature && (
                    <Box sx={{ ml: 2, mb: 3 }}>
                        <Typography variant="subtitle1" gutterBottom>
                            <strong>Signature:</strong>
                        </Typography>
                        <Box sx={{
                            border: '1px solid rgba(0, 0, 0, 0.2)',
                            borderRadius: '4px',
                            p: 2,
                            mt: 1,
                            backgroundColor: '#FFFFFF'
                        }}>
                            <Typography variant="body2" component="div" sx={{ color: '#000000' }} dangerouslySetInnerHTML={{ __html: signature }} />
                        </Box>
                    </Box>
                )}

                {attachments && attachments.length > 0 && (
                    <Paper sx={{ p: 2, mb: 3 }}>
                        <Typography variant="h6" gutterBottom>
                            Attachments ({attachments.length})
                        </Typography>
                        <List>
                            {attachments.map((attachment, index) => (
                                <React.Fragment key={index}>
                                    <ListItem>
                                        <ListItemText
                                            primary={attachment.filename}
                                            secondary={`${calculateFileSize(attachment.content)}`}
                                        />
                                        <ListItemSecondaryAction>
                                            <IconButton
                                                edge="end"
                                                aria-label="delete"
                                                onClick={() => handleRemoveAttachment(index)}
                                            >
                                                <DeleteIcon />
                                            </IconButton>
                                        </ListItemSecondaryAction>
                                    </ListItem>
                                    {index < attachments.length - 1 && <Divider />}
                                </React.Fragment>
                            ))}
                        </List>
                    </Paper>
                )}

                <Button
                    variant="contained"
                    color="primary"
                    fullWidth
                    onClick={onSend}
                    disabled={loading}
                >
                    {loading ? (
                        <>
                            <CircularProgress size={24} sx={{ mr: 1 }} />
                            Sending Emails...
                        </>
                    ) : (
                        `Send Emails to ${recipients.length} Recipient${recipients.length !== 1 ? 's' : ''}`
                    )}
                </Button>
            </Paper>
        </Box>
    );
};

export default ReviewAndSend;

// Calculate file size helper function
function calculateFileSize(base64String) {
    const padding = base64String.endsWith('==') ? 2 : base64String.endsWith('=') ? 1 : 0;
    const size = Math.floor((base64String.length * 3) / 4) - padding;

    if (size > 1024 * 1024) {
        return `${(size / (1024 * 1024)).toFixed(2)} MB`;
    } else {
        return `${(size / 1024).toFixed(2)} KB`;
    }
} 